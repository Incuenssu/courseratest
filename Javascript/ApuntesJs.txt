Variables
	Empieza siempre por "var"
		var message = "Hello World";
		var palabra = "1";
	No se declaran tipos en Javascript: Int, String, float, etc.
		Es por eso que se le llama dinamic typed language
		Same variable can hold different types during the life of the execution

Funciones
	Estructura:
		function NAME () {}
		var NAME = function () {}
	Tambien se puede definir una funcion como variable, es lo mismo escribir:
			function a () {}
		que escribir
			var a = function () {}		Aqui no se pone el name
	Para invocar una funcion:
		NAME();
		a();
	Arguments/parametros:
		function compare (x, y){
		return x>y;
		}
	JS permite hacer lo siguiente:
		function compare (x, y) {}; 	Tenemos la funcion comparar x e y
		var a = compare (4, 5);			Comparamos 4 y 5 y lo guardamos en a
		compare (4, "a");				Comparamos 4 y a, que es el resultado de comparar 4 y 5
		compare();						No comparamos nada, pero la sintaxis es correcta

Scope
	Global
		Variables and function defined here are available everywhere
	Function (aka lexical)
		Variables and function defined here are available only within this function
	Scope Chain:
		Everything is executed in an Execution Context
		Function invocation creates a new Execution Context
		Each Execution Context has:
			Its own Variable Environment
			Special "this" object
			Reference to its Outer Environment
		Global scope does not have an Outer Environment as it's the most outer there is
		How it works Scope Chain:
			Referenced (not defined) variable will be searched for in its corrent scope first.
			If not found, the Outer Reference will be searched.
			if not found, the Outer Reference's Outer Reference will be searched.
			Etc
			This will keep going the Global scope.
			If not foun in GLobal scope, the variable is undefined.
		Example:
			Global
				var x = 2;
				A();
			Function A
				var x = 5;
				B();
			Function B
				console.log(x);
			The result printed is 2 porque la funcion B esta siendo llamada desde el Global, si fuese llamada(desde el inicio) en A, entonces el resultado seria 5.
			
JavasCript built-in Types (tipos integrados/incorporados en Javascript)
	A type is a particular data structure.
		Each language defines some built-in types.
		Built-in types can be used to build other data structures.
		Javascript has 7 built-in types: 6 primitives and 1 Object type
	Object is a collection of name/value pairs.
		Person object: (Ejemplo)
			firstname: 'Jose Luis', 	NAME(firstname) y VALUE(Jose Luis) 
			lastname: 'Gonzalez',		otro par de name/value
			social: {					NAME(social) y VALUE({lo de aqui dentro})
						linkedin : 'joseluisgonza',			otro par de name/value
						twitter: 'jolugo',					otro par de name/value
						facebook: 'JoseLuisGonalez',		otro par de name/value
					}
	Primitive type represents a single, inmutable value
		Single value, NOT an object
		Inmutable means once it's set, it can't be changed
			value becomes read-only
			you can create another value based on an exiting one
		Booleans: true or false
		Undefined: signifies that no value has ever been set
			you only have one value: undefined
			you can set a variable to undefined, but you should NEVER do it. 
				Its meaning is that it's never been defined, so defining it to undefined is counter to its core meaning
		Null: signifies lack of value
			as opposed to undefined, which is lack of definition
			can only have one value: null
			it's OK to explicitly set a variable to null
		Number: is the only numeric type in Javascript
			always represented under the hood as double-precision 64-bit floating point
			JS does not have an integer type
		String: is sequences of characters used to represent text
			use either single or double quotes. "text" or 'text'
	-->	Symbol: is new to ES6. 
			Not covered in this class
			ES6(realeased 2015) isn't widely supported or used yet

Common language constructs
	String concatination
		Podemos concatenar String con +=
			var palabra = "Hello";
			palabra += " ";
			palabra += "World";
			palabra += "!";					Es lo mismo que poner: palabra(Primer string, el de Hello) = palabra + " World!"
			console.log(palabra)				Resultado: Hello World!
			console.log(palabra + "!!!")		Resultado: Hello World!!!!
	Regular math operators
		+ - / *
		Tiene en cuenta todos los decimales:
			console.log((3*4)/233);		Resultado: 0.05150214592274678
		Si operamos con undefined, no da error, da un NaN(Not A Number)
			console.log(undefined/5);	Resultado: NaN
			Es comun definir una funcion que necesita una variable
				function test1(a){      
            		console.log(a/5)
        		}
        	Pero al llamar a la funcion no introducimos la variable y nos da como resultado NaN
        		test1();
        	OJO que no da error y nos deja correr JS
    Igualdad
    	== ===
    	Lo mismo que otros lenguajes
    		var x = 4, y = 4;					Esto es lo mismo que poner:
    		if (x == y) {							var x = 4;
        	console.log("x is equal to y")			var y = 4;
    		}				Resultado: x is equal to y
    	Pero, da igual el tipo de la variable que le hayamos asignado, JS modifica sus tipos para que sean iguales automaticamente
    		var y = 4;		Numero
    		var x = "4";	String
    		if (x == y) {
        		console.log("x is equal to y")
    		}				Resultado: x is equal to y
    	A no ser que queramos una igualdad estricta, con el triple igual, que entonces no variara sus tipos
    		var y = 4;		Numero
    		var x = "4";	String
    		if (x === y) {
        		console.log("X is equal to y")
    		}else{
        		console.log("X is NOT strict equal to y")
    		}				Resultado: X is NOT strict equal to y
    Verdadero o falso Boolean
    	Todo lo que JS considera false:
    		false
    		null
    		undefined
    		""			empty string
    		0
    		NaN
    	Todo lo que JS considera true:
    		true
    		"hello"
    		1
    		-1
    		"false"		This is a String with the word "false"
    	Si nos olvidamos podemos pasar por consola la siguiente orden:
    		Boolean(aqui ponemos nuestra duda);
    			Boolean(null);				false
    			Boolean(0);					false
    			Boolean("hey hey hey");		true
    Best practice for {} style
    	No se pone la apertura de llaves en una linea nueva, ya que da error. ya que es como poner un ;
    		function a() 			funntion a();
    		{
    			console.log("lo que sea")
    		}				Resultado: undefined
    	Se pone la apertura de llaves en la misma linea, y asi no da error.
    		function a() {
    			console.log("lo que sea")
    		}				Resultado: lo que sea
    Bucle FOR
    	Muy similar a Java:
    		for (var i = 0; i < 10; i++) {		de 0 a 9
        		ORDEN
    		}
    			i++ es lo mismo que i=i+1
    		for (var i = 0; i < 100; i=i*4) {		de 0 a 9
        		ORDEN
    		}
    Semicolons(;) in JS are optional
    	https://mislav.net/2010/05/semicolons/

Handling default values
	Si no metemos nada en una funcion obtenemos undefined
		function orderCHickeWith(sideDish) {
        	console.log("Chicken with " + sideDish)
    	}
    	orderCHickeWith("noodles")      //Chicken with noodles
    	orderCHickeWith()               //Chicken with undefined
    Para evitar el undefined podemos dar un valor por default
    	function orderCHickeWith(sideDish) {
        	if (sideDish === undefined) {
            	sideDish =  "nothing"
        	}
        	console.log("Chicken with " + sideDish)
    	}
    	orderCHickeWith("noodles")      //Chicken with noodles
    	orderCHickeWith()               //Chicken with nothing
    Pero JS tiene un shortcut para evitar poner el if
    	function orderCHickeWith(sideDish) {
        	sideDish = sideDish || "whatever!"      // El simbolo || es un OR
        	console.log("Chicken with " + sideDish)
    	}
    	orderCHickeWith("noodles")      //Chicken with noodles
    	orderCHickeWith()               //Chicken with whatever!
    Esto quiere decir que primero da el valor true:
    	Si sideDish = "" que es false
    		sideDish = sideDish || "whatever!"	-> false || true
    		usa "whatever!"
    	Si sideDish = 1 que es true
    		sideDish = sideDish || "whatever!"	-> true || true
    		usa 1
    	Es decir, utiliza SIEMPRE EL PRIMER TRUE

Objects
	Creation:
		var companey = new Object();
	Aunque no exista el metodo del objeto, JS lo crea:
		company.name = "Facebook"		Suponiendo que "name" no exista como metodo en el objeto
		Console.log(company)		Resultado: name: "Facebook"
									Es decir, no da error porque usemos un metodo que no existe
		Pero ojo con los puntos, que no autocrea los metodos
		company.ceo.firstname = "Mark"
		console.log(company)		Resultado: error
		company.ceo = new Object()
		company.ceo.firstname = "Mark"
		company["lastname"] = "Zuckenberg"
		var adress = "Valley of the death"
		company[adress] = 112
		console.log(company)		Resultado: name: "Facebook", ceo: Object {firstname: "Mark"} 
		Enlace:
		console.log(company.ceo.fistname)		Resultado: Mark
		console.log(company["name"])			Resultado: Facebook
	Simplificacion de creacion de objetos:
		Es mejor hacerlo con llaves:
			var facebook = {
        		name: "Facebook",
        		ceo: {
            		firstname: "Mark",
            		lastname: "Zuckenberg",
            		color: "blue"
        		},
        		"Stock of company": 110
    		}
    		OJO con las comas que son necesarias
    		console.log(facebook.ceo.firstname)		Resultado: Mark

Functions 			CORE FEATURE
	Functions in JS are objetcts
		function multiply(x, y){
    	    return x*y
    	}
    Podemos asignarles metodos:
    	multiply.version = "v1.0.0"
    	console.log(multiply.version)		Resultado: v1.0.0
    Function factory
    	Se pueden enlazar funciones unas con otras y crear unas dentro de otras:
    		function makemultiplier(multiplier){
		        var myFunc = function(x){
		            return multiplier * x;
		        };
		        return myFunc
		    }
		    var multiplyby3 = makemultiplier(3)
		    console.log(multiplyby3(10))
		    var doubleAll = makemultiplier(2)
		    console.log(doubleAll(100))
	Pasing functions as arguments
		Se pueden usar funciones como parametros
			function doOperationOn(x, operation){
		        return operation(x)
		    }
		    var result = doOperationOn(5, multiplyby3)
		    console.log(result)

Passing variable by value vs by reference
	Given b=a, passing/copying by VALUE means changing copied value in b DOES NOT AFFECT the value stored in a and visaversa
		Copiar/pasar el valor significa que el cambio en B no afecta a que cambie A y viceversa
	Given b=a, passing/copying by REFERENCE means changin copied value in b DOES AFFECT the value stored in a and visaversa
		Copiar/pasar la referencia significa que el cambio en B  afecta a que cambie A y viceversa
	In JS, primitives are passed by value, objects are passed by reference
		PRIMITIVES -> VALUE
		OBJECTS -> REFERENCE
 ->	"Under the hood", everything is actually passed by value.
 		The way of the objects  and primitives are stored in memory
 			Examples:
 				Primitives:
 					var a = 7
 					var b = a
 					Memory:		Diferentes memorias
 						a --> 7
 						b --> 7
 					b = 5
 					Memory:		No hay sobreescritura de memorias. VALUE
 						a --> 7
 						b --> 5
 				Objects
 					var a = {x:7}
 					var b = a 	Ahora B copia a A pero no su valor, si no hacia adonde apunta A
 					Memory 		Ambos apuntan a la misma memoria. REFERENCE
 						a --> 7 <-- b
 					b.x = 5
 					Memory 		b sobreescribe a la memoria a la que apunta, por lo que tambien sobreescribe la de a
 						a --> 5 <-- b
 				In both of them, b ends up with the same value as a

Function Constructor, prototype and the "this" keyword
	Prototype: 
		Sirven para no cargar toda la funcion en la memoria:
			funcion.PROTOTYPE.AtributoQueNoQueremosQueSeCargueSiempreEnMemoria = funcion
		Ejemplo
			function Circle2(radius){
        		this.radius = radius
    		}
    		Circle2.prototype.getArea = 
        		function () {
            		Math.PI * Math.pow(this.radius, 2)
        		}
        Esta funcion ahora aparece en la zona de "__proto__", no se carga siempre
        	Circle2 {radius: 10}
				radius: 10
				__proto__:
					getArea: ƒ ()
					constructor: ƒ Circle2(radius)
					__proto__: Object
		No se deberia poner dentro de las funciones porque se cargaria toda la funcion siempre y no es el motivo del Prototype
			function Circle2(radius){
        		this.radius = radius
        			Circle2.prototype.getArea = 			NO permitido
        			function () {
            			Math.PI * Math.pow(this.radius, 2)
        			}
    		}

Arrays
	Son colecciones de datos, pero en JS tienen algunas propiedades interesantes
	Creacion
		VAR nombrearray = NEW ARRAY()
	Introduccion de datos en el array:
		nombrearray[numeroquequeremosintroducir] = datointroducido
		nombrearray[2] = 2
	En los Arrays de JS se pueden introducir todo tipo de datos mezclados:
		array[0]= "Mike"													String
    	array[1] = 2														Numeros
    	array[2] = function (name){ 										Funciones
    	    console.log("Hello " + name)
    	}
    	array[3] = {course: "HTML, CSS and JS"}								Objetos literales
   	Llamada de arrays: con el nombre y su subindice
   		nombrearray[subindice]
   		array[1]				Resultado: "Mike"
   	Podemos usar la funcion de un array como si de una funcion suelta se tratase
   		nombrearray[indicearray](parametros)
   		array[2]("Jose Luis")					Resultado: "Hello Jose Luis"
   		array[2](array[0])						Resultado: "Hello Mike"
   		console.log(array[3].course)			Resultado: "HTML, CSS and JS"
   	Short hand array creation
   		VAR nombrearray = [dato0, dato1, dato2]
   		var names = ["Jose", "Pepe", "Antonio"]
   	Se puede usar la caracteristica length
   		for(var i = 0; i < names.length; i++)[
     	   console.log("Hello to " + names[i])
    	]
    Si no existe valor en el subindice, se considera undefined
    	names[100] = "Jim"
    	for(var i = 0; i < names.length; i++)[
     	   console.log("Hello to " + names[i])
    	]
    	Resultado:	Hello Jose
    				Hello Pepe
    				Hello Antonio
    				Hello undefined X 97
    				Hello Jim
    Para arrays con objetos literales es interesante el siguiente bucle FOR. Haciendo llamada a sus propiedades
    	var myObj = {
    	    name: "Mike",
    	    course: "HTML, CSS and JS",
    	    platform: "Coursera"}
    	for (var prop in myObj){
     	   console.log(prop + ": " + myObj[prop])
    	}						Resultado:			name: Mike
													course: HTML, CSS and JS
													platform: Coursera
	Aunque tambien es interesante en arrays normales
		for (var name in names){
        	console.log("Hello: " + names[name])
    	}						Resultado: 			Hello: Jose
													Hello: Pepe
													Hello: Antonio
	Pero los arrays tambien son objetos por lo que podemos hacer:
		names.greeting = "Hi: "
		for (var name in names){
     	   console.log("Hello: " + names[name])
    	}						Resultado: 			Hello: Jose
													Hello: Pepe
													Hello: Antonio
													Hello: Hi:
		for (var name in names){
     	   console.log(names.greetings + names[name])
    	}						Resultado: 			Hi: Jose
													Hi: Pepe
													Hi: Antonio
													Hi: Hi:

Closures
	Debido a las closures de JS, JS mantiene en memoria las funciones, no ejecutandose, en Stand By
		function makeMultiplier(multiplier) {
	        //var multiplier = 2    es lo mismo que cuando mas adelante escribimos      var doubleAll = makeMultiplier(2)
	        console.log("multiplier is: " + multiplier) 		Resultado: "multiplier is: 2"
	        return (
	            function(x){        			En esta parte igualamos esta funcion a doubleALL por lo que x = 10
	                return multiplier * x
	            }
	        )       
	    }
	    var doubleAll = makeMultiplier(2)       Por lo que makeMultiplier se ejecuta aqui y no se vuelve a ejecutar
	    console.log(doubleAll(10))              Aqui se ejecuta la funcion(x) pero no se ejecuta makeMultiplier

Fake Namespaces
	Lecture 52
	Ocurre cuando tenemos mas de un archivo de JS, que se sobreescriben nombres.
		Archivo 1: script1.js
						var name = "John"
						function sayHello () { console.log("Hello " + name) }
		Archivo 2: script2.js
						var name = "Mike"
						function sayHi () { console.log("Hi " + name) }
		Archivo 3: script3.js
						sayHello()
						sayHi()
		Resultado:
			Hello Mike
			Hi Mike
		Como vemos se han sobreescrito las variables "name"
	Las dos variables "name" estan escritas en el Global Scope, por eso se sobreescriben
	Esto se soluciona utilizando los llamados Fake Namespaces Objects
		Archivo 1: script1.js
						var johngreeter = {}
						johngreeter.name = "John"
						johngreeter.sayHello = function () { console.log("Hello " + name) }
		Archivo 2: script2.js
						var mikegreeter = {}
						mikegreeter.name = "Mike"
						mikegreeter.sayHi = function () { console.log("Hi " + name) }
		Archivo 3: script3.js
						johngreeter.sayHello()
						mikegreeter.sayHi()
		Resultado:
			Hello John
			Hi Mike

Immediately Invoked Function Expression. IIFE
		La funcion se auto invoca a si misma, no necesita ser llamada
			function a() { console.log("Hello") }
			a()			Funcion normal, donde hay que llamarla para hacerla funcionar
			( function a() {console.log("Hello")} ) ()		Funcion que se auto invoca
		Con parametros:
			( function a(name) {console.log("Hello " + name)} ) ()			Resultado: "Hello undefined"
			( function a(name) {console.log("Hello " + name)} ) ("Jose")	Resultado: "Hello Jose"
		Para solucionar el Fake Namespaces:
			Archivo 1: script1.js
				(function (window){
    			var johngreeter = {}
    			johngreeter.name = "John"
    			johngreeter.sayHello = function () { console.log("Hello " + name) }
    			window.johngreeter = johngreeter
    			})(window)
    		Archivo 2: script1.js
				(function (window){
    			var mikegreeter = {}
    			mikegreeter.name = "John"
    			mikegreeter.sayHello = function () { console.log("Hi " + name) }
    			window.mikegreeter = mikegreeter
    			})(window)
    		Archivo 3: script3.js
						johngreeter.sayHello()
						mikegreeter.sayHi()
			Resultado:
				Hello John
				Hi Mike

DOM manipulation
	Llamada desde el HTML
		<script src="js/script.js"></script>
		</body>
		 casi SIEMPRE al final del HTML, pegando al /body
	Llamada por ID
		document.getElementbyId("ELID");
	Podemos guardar el valor de un input del HTML
        var name = document.getElementById("name").value
        var message = "Hello " + name + "!"
    Introducimos esta variable en, por ejemplo, un DIV con ID "content". Aparecerá sin recargar el mensaje, ya que está creado en el HTML.
        document.getElementById("content").textContent = message
    Si queremos hacer lo mismo pero además, queremos que sea un "h2"
        var message = "<h2>Hello " + name + "!</h2>"
        document.getElementById("content").innerHTML = message
    Si queremos que cuando escriban algo en especifico pase algo
        if (name === "student"){
        	var title += " & algo mas" 				recordamos que title += "algo" es lo mismo que title = title + "algo"
            //Si usamos "querySelector" estamos llamando a clases e ID como si estuviesemos en CSS
            document.querySelector("h1").textContent = prueba
            	Podemos utilizar
            		querySelector("h1")
            		querySelector("#title")
            		querySelector(".clase")
            		como si trabajasemos con un CSS
		Entonces si escriben "student" en la caja, cambiara el titulo
            
Handling Events
	Son cosas que pasan cuando se recarga la pagina o cuando el usuario interacciona con la pagina
	Se asignan en el HTML poniendo "on..."
		onclick = "sayHello()"
		onblur = 
		onkeypress
		on 
	Tambien podemos crear eventos desde el archivo de JS, no tiene porque ser desde HTML
		document.querySelector("button").addEventListener("click", sayHello)
		Es lo mismo pero escrito de otra forma. Pero es mejor el de arriba porque establecemos un listener
		document.querySelector("#boton2").onclick = sayHello
		Estos dos es lo mismo que tener en el HTML
		<button onclick="sayHello();">
	Con "this" podemos interactuar con la propia llamada. Solo funciona si llamamos desde el archivo de JS, no desde el onclick del HTML
		document.querySelector("button").addEventListener("click", sayHello)
		function sayHello (){
		this.textContent = "cambio"
		...
		}
	Si ponemos listener no hace falta establecer la llamada del JS al final del HTML
		<script src="js/script.js"></script>
		</body>
		Ya que cargara toda la pagina y se pondra a escuchar
	Por lo que lo mejor es establecer un evento que se active cuando cargue toda la pagina: HTML, CSS, fotos, etc todo.
		document.addEventListener("DOMContentLoaded",
	        function (event){
	            function sayHello2(event){}
	            function funcionloquesea(event){}
	        }
	    )
	    Esto es lo mejor porque se pone en el meta (y no al final del body) y queda mas recogido, ordenado y no genera cosas raras al activar eventos sin cargar toda la pagina
	Para saber los eventos que podemos hacer:
		developer.mozilla.org/en-US/docs/WeB/API/Event

HTTP Basics
	HyperText Transfer Protocol
	Based on request/response stateless protocol. Es decir, cuando hay un request, no importa los request anteriores
		Client(browser usually) opens connection to server
		Client sends HTTP request for a resource
		Server sends HTTP response to the client (usually with the resource of the client)
		Client closes connection to server
	Identifiying resources on the web
		URN: Uniform Resource Name
			Uniquely identifies resource or name of resource
			Does not tell us how to get the resource
			Example, in a platform of a empresa:
			HTML/CSS/JavaScript/WebDevelopers/Jose/Chohin
		URI: Uniform Resource Identifier
			Uniquely identifies resource of location of resource
			Dos not necessarily tell us how to get the resource
			Example:
			/official_web_site/index.html
		URL: Uniform Resource Locator
			Form of URI that provides info on how to get resource
			Example:
			http://www.mysite.com/official_web_site/index.html
	Request Structure (GET)
		GET /index.html?firstName=Jose HTTP/1.1
		GET 				Method
		/index.html 		URI String
		?firstName=Jose 	Query String: name/value pairs separated by &. Example: ?first=Jose&last=Gonzalez
		HTTP/1.1			HTTP version
		Es un URI y no un URL porque ya estamos conectados al servidor, por lo que solo necesitamos el URI para hablar con el servidor
	Methods
		GET 	
			Retrieves the resource
			Data is passed to server as part of the URI. In Example: query string
		POST
			Sends data to server in order to be processed
			The data is sent in the message body
			Example:
				POST /index.html HTTP/1.1
				Host: coursera.org 			Request Header
				Accept-Charset: utf-8		Request Header
				firstName = Jose 			Message Body
				...
		More methods not covered yet
	Response Structure
		HTTP/1.1 200 OK
			HTTP/1.1 	HTTP version
			200 		Response Status Code
			OK 			English phrase describing status code
		Example:
			HTTP/1.1 200 OK
			Date: Tue, 11 Aug 20014 19:00:01 GMT
			Content-Type: text/html
			<html> 		Not necesary HTML, it can be: text, XML, JSON
			<body>
			<h1>Secret to gaining weight</h1>
			<p>Develop Coursera courses....</p>
			</body>
			</html>
		Response Status Codes
			200 OK 							Ok, here is the content you requested
			404 Not Found 					Server can't find the resource requested
			403 Forbidden 					Unauthenticated client tried to access a secure resource
			500 Internal Server Error 		Some unhandled error was raised on the server

Ajax basics
	Asynchronous Javascript and XML
	While Ajax started with XML, very few apps use it nowadays
		Plain test (at times as html) an JSON is used instead
	Traditional web app flow
		HTML --Button is pressed, http request sent--> Server --Response: new page--> (new)HTML
		Even if returned page is 99% identical to original
	Ajax web app flow
		HTMl --HTTP request sent by JS--> Server --Response: Small piece of data that's inserted into current page--> (same)HTML
		Faster response
			less bandwith(banda ancha), nicer experience for user
	Synchronous: Execution of one instruction at a time
		Can't start execution of another instruction until the first instruction finished its execution
	Asynchronous: Execution of more than one instruction at a time
		Asynchronous instruction returns right away
		The actual execution is done in a separate thread or process
	But if JS is synchronous, how does Ajax work then?
		Because exists a lot of things happening in the browser:
			Event Queue <---	JS Engine 	---> HTML rendering
			webGL 		<---	JS Engine	---> HTTP Requestor
		JS engine is synchronous
		HTTP Requestor is asynchronous
	Ajax process
			JS Engine 															HTTP Requestor
				JS code line
				JS code line 					
				make Ajax request -----Address JS function response handler------->	
				JS code line (no espera a que Ajax responda)
				JS code line
				Handle server response (callback function) <-----------------------	

Processing JSON
	JavaScript Object Notation
	Great format for passing data from server to client & back
	Caracteristicas
		Lightweight data-interchange format
			Simple textual representation of data
		Easy for humans to read and write
		Easy for machines to parse and generate
		Completely independent of any languaje
	Syntaxis rules
		Subset of JS object literal syntax... but
			Property names must be in double quotes
			String value must be in double quotes
		Syntax for everything else is exactly like for object literal
	Example:
		var jsonString = 
			' { 								Single quotes is for that
				"firstName" : "Jose",			All of property names in double quotes
				"lastName" : "Perez",				String value in double quotes
				"likesSpanishFood" : false,			boolean value not in quotes
				"numberOfDisplays" : 2 				number value not in quotes
			} '
	Common Misconception
		JSON is NOT a JS object literal
		JSON is just a string
		The syntax of JSON is based on object literal though
		Need to convert JSON into a JS object
	Converting JSON to String & back to JSON
		converts from json string to object
			var obj = JSON.parse(jsonString);
		converts from object to json string
			var str = JSON.stringify(obj);
			








































